name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [ main, nexops/** ]
    branches:
      - main
      - dev

jobs:
  test-analyze-build-deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: touheedkn/app-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: ./mvnw test

      - name: Run Checkstyle
        run: ./mvnw checkstyle:check

      - name: Log in to GitHub Container Registry
        if: success()
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        if: success()
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:pr-${{ github.event.pull_request.number }}-${{ steps.vars.outputs.sha_short }} -f Dockerfile .

      - name: Push Docker image to staging
        if: success()
        run: |
          docker push $REGISTRY/$IMAGE_NAME:pr-${{ github.event.pull_request.number }}-${{ steps.vars.outputs.sha_short }}

      - name: Deploy to staging environment
        if: success()
        run: |
          echo "Deploying image: $REGISTRY/$IMAGE_NAME:pr-${{ github.event.pull_request.number }}-${{ steps.vars.outputs.sha_short }} to staging environment"
          # Add deployment script/command here, e.g., kubectl set image, SSH to staging, etc.