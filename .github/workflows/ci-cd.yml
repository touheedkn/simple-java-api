name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - dev
      - nexops/**
  push:
    branches:
      - nexops/**

jobs:
  test-analyze-build-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: ghcr.io/touheedkn/app-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/apache/maven/plugins/maven-surefire-plugin
            !~/.m2/repository/org/apache/maven/plugins/maven-checkstyle-plugin
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Run Tests (JUnit)
        run: ./mvnw test

      - name: Run Checkstyle
        run: ./mvnw checkstyle:check

      - name: Login to GitHub Container Registry
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          docker build -f Dockerfile -t $DOCKER_IMAGE_NAME:${{ github.sha }} .

      - name: Push Docker image to staging
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          docker push $DOCKER_IMAGE_NAME:${{ github.sha }}

      - name: Deploy to Staging Environment
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        env:
          IMAGE_TAG: ${{ github.sha }}
          STAGING_URL: ${{ secrets.STAGING_URL }}
          STAGING_DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}
        run: |
          echo "Deploying image $DOCKER_IMAGE_NAME:$IMAGE_TAG to Staging"
          # Insert your staging deployment commands here, e.g.:
          # curl -X POST -H "Authorization: Bearer $STAGING_DEPLOY_TOKEN" \
          #   -d '{"image":"'"$DOCKER_IMAGE_NAME:$IMAGE_TAG"'"}' $STAGING_URL

      - name: Cleanup Docker images
        if: always()
        run: |
          docker rmi $DOCKER_IMAGE_NAME:${{ github.sha }} || true